(   6) nprocs =   24
(   7) nprocs =   24
(   8) nprocs =   24
(   9) nprocs =   24
(  10) nprocs =   24
(  11) nprocs =   24
(  23) nprocs =   24
(   0) nprocs =   24
(  12) nprocs =   24
(   1) nprocs =   24
(  13) nprocs =   24
(   2) nprocs =   24
(  14) nprocs =   24
(   3) nprocs =   24
(  15) nprocs =   24
(  16) nprocs =   24
(   4) nprocs =   24
(   5) nprocs =   24
(  17) nprocs =   24
(  18) nprocs =   24
(  19) nprocs =   24
(  20) nprocs =   24
(  21) nprocs =   24
(  22) nprocs =   24
(   0) ndata_all = 528506 ndata_avg = 22022 ndata = 22022 ndata_s = 0 ndata_e = 22021
(   0) nmax = 120 npara_all = 14641
(   0) index  check: int_data ~=     0.300G < INT_LIM (2G) : safe~~~
(   0) index  check: int_para ~=     0.200G < INT_LIM (2G) : safe~~~
(   0) memory check: mem_data ~=     1.597G < MEM_LIM (4G) : safe~~~
(   0) memory check: mem_para ~=     1.597G < MEM_LIM (4G) : safe~~~
(   0) memory check: mem_all  ~=     3.999G < MEM_LIM (4G) : safe~~~
(   1) ndata_all = 528506 ndata_avg = 22022 ndata = 22022 ndata_s = 22022 ndata_e = 44043
(   1) nmax = 120 npara_all = 14641
(   1) index  check: int_data ~=     0.300G < INT_LIM (2G) : safe~~~
(   1) index  check: int_para ~=     0.200G < INT_LIM (2G) : safe~~~
(   1) memory check: mem_data ~=     1.597G < MEM_LIM (4G) : safe~~~
(   1) memory check: mem_para ~=     1.597G < MEM_LIM (4G) : safe~~~
(   1) memory check: mem_all  ~=     3.999G < MEM_LIM (4G) : safe~~~
(   3) ndata_all = 528506 ndata_avg = 22022 ndata = 22022 ndata_s = 66066 ndata_e = 88087
(   3) nmax = 120 npara_all = 14641
(   3) index  check: int_data ~=     0.300G < INT_LIM (2G) : safe~~~
(   3) index  check: int_para ~=     0.200G < INT_LIM (2G) : safe~~~
(   3) memory check: mem_data ~=     1.597G < MEM_LIM (4G) : safe~~~
(   3) memory check: mem_para ~=     1.597G < MEM_LIM (4G) : safe~~~
(   3) memory check: mem_all  ~=     3.999G < MEM_LIM (4G) : safe~~~
(   4) ndata_all = 528506 ndata_avg = 22022 ndata = 22022 ndata_s = 88088 ndata_e = 110109
(   4) nmax = 120 npara_all = 14641
(   4) index  check: int_data ~=     0.300G < INT_LIM (2G) : safe~~~
(   4) index  check: int_para ~=     0.200G < INT_LIM (2G) : safe~~~
(   4) memory check: mem_data ~=     1.597G < MEM_LIM (4G) : safe~~~
(   4) memory check: mem_para ~=     1.597G < MEM_LIM (4G) : safe~~~
(   4) memory check: mem_all  ~=     3.999G < MEM_LIM (4G) : safe~~~
(   5) ndata_all = 528506 ndata_avg = 22022 ndata = 22022 ndata_s = 110110 ndata_e = 132131
(   5) nmax = 120 npara_all = 14641
(   5) index  check: int_data ~=     0.300G < INT_LIM (2G) : safe~~~
(   5) index  check: int_para ~=     0.200G < INT_LIM (2G) : safe~~~
(   5) memory check: mem_data ~=     1.597G < MEM_LIM (4G) : safe~~~
(   5) memory check: mem_para ~=     1.597G < MEM_LIM (4G) : safe~~~
(   5) memory check: mem_all  ~=     3.999G < MEM_LIM (4G) : safe~~~
(   6) ndata_all = 528506 ndata_avg = 22022 ndata = 22022 ndata_s = 132132 ndata_e = 154153
(   6) nmax = 120 npara_all = 14641
(   6) index  check: int_data ~=     0.300G < INT_LIM (2G) : safe~~~
(   6) index  check: int_para ~=     0.200G < INT_LIM (2G) : safe~~~
(   6) memory check: mem_data ~=     1.597G < MEM_LIM (4G) : safe~~~
(   6) memory check: mem_para ~=     1.597G < MEM_LIM (4G) : safe~~~
(   6) memory check: mem_all  ~=     3.999G < MEM_LIM (4G) : safe~~~
(   7) ndata_all = 528506 ndata_avg = 22022 ndata = 22022 ndata_s = 154154 ndata_e = 176175
(   7) nmax = 120 npara_all = 14641
(   7) index  check: int_data ~=     0.300G < INT_LIM (2G) : safe~~~
(   7) index  check: int_para ~=     0.200G < INT_LIM (2G) : safe~~~
(   7) memory check: mem_data ~=     1.597G < MEM_LIM (4G) : safe~~~
(   7) memory check: mem_para ~=     1.597G < MEM_LIM (4G) : safe~~~
(   7) memory check: mem_all  ~=     3.999G < MEM_LIM (4G) : safe~~~
(   8) ndata_all = 528506 ndata_avg = 22022 ndata = 22022 ndata_s = 176176 ndata_e = 198197
(   8) nmax = 120 npara_all = 14641
(   8) index  check: int_data ~=     0.300G < INT_LIM (2G) : safe~~~
(   8) index  check: int_para ~=     0.200G < INT_LIM (2G) : safe~~~
(   8) memory check: mem_data ~=     1.597G < MEM_LIM (4G) : safe~~~
(   8) memory check: mem_para ~=     1.597G < MEM_LIM (4G) : safe~~~
(   8) memory check: mem_all  ~=     3.999G < MEM_LIM (4G) : safe~~~
(   9) ndata_all = 528506 ndata_avg = 22022 ndata = 22022 ndata_s = 198198 ndata_e = 220219
(   9) nmax = 120 npara_all = 14641
(   9) index  check: int_data ~=     0.300G < INT_LIM (2G) : safe~~~
(   9) index  check: int_para ~=     0.200G < INT_LIM (2G) : safe~~~
(   9) memory check: mem_data ~=     1.597G < MEM_LIM (4G) : safe~~~
(   9) memory check: mem_para ~=     1.597G < MEM_LIM (4G) : safe~~~
(   9) memory check: mem_all  ~=     3.999G < MEM_LIM (4G) : safe~~~
(  10) ndata_all = 528506 ndata_avg = 22022 ndata = 22022 ndata_s = 220220 ndata_e = 242241
(  10) nmax = 120 npara_all = 14641
(  10) index  check: int_data ~=     0.300G < INT_LIM (2G) : safe~~~
(  10) index  check: int_para ~=     0.200G < INT_LIM (2G) : safe~~~
(  10) memory check: mem_data ~=     1.597G < MEM_LIM (4G) : safe~~~
(  10) memory check: mem_para ~=     1.597G < MEM_LIM (4G) : safe~~~
(  10) memory check: mem_all  ~=     3.999G < MEM_LIM (4G) : safe~~~
(  11) ndata_all = 528506 ndata_avg = 22022 ndata = 22022 ndata_s = 242242 ndata_e = 264263
(  11) nmax = 120 npara_all = 14641
(  11) index  check: int_data ~=     0.300G < INT_LIM (2G) : safe~~~
(  11) index  check: int_para ~=     0.200G < INT_LIM (2G) : safe~~~
(  11) memory check: mem_data ~=     1.597G < MEM_LIM (4G) : safe~~~
(  11) memory check: mem_para ~=     1.597G < MEM_LIM (4G) : safe~~~
(  11) memory check: mem_all  ~=     3.999G < MEM_LIM (4G) : safe~~~
(   2) ndata_all = 528506 ndata_avg = 22022 ndata = 22022 ndata_s = 44044 ndata_e = 66065
(   2) nmax = 120 npara_all = 14641
(   2) index  check: int_data ~=     0.300G < INT_LIM (2G) : safe~~~
(   2) index  check: int_para ~=     0.200G < INT_LIM (2G) : safe~~~
(   2) memory check: mem_data ~=     1.597G < MEM_LIM (4G) : safe~~~
(   2) memory check: mem_para ~=     1.597G < MEM_LIM (4G) : safe~~~
(   2) memory check: mem_all  ~=     3.999G < MEM_LIM (4G) : safe~~~
(  23) ndata_all = 528506 ndata_avg = 22022 ndata = 22000 ndata_s = 506506 ndata_e = 528505
(  12) ndata_all = 528506 ndata_avg = 22022 ndata = 22022 ndata_s = 264264 ndata_e = 286285
(  13) ndata_all = 528506 ndata_avg = 22022 ndata = 22022 ndata_s = 286286 ndata_e = 308307
(  14) ndata_all = 528506 ndata_avg = 22022 ndata = 22022 ndata_s = 308308 ndata_e = 330329
(  15) ndata_all = 528506 ndata_avg = 22022 ndata = 22022 ndata_s = 330330 ndata_e = 352351
(  16) ndata_all = 528506 ndata_avg = 22022 ndata = 22022 ndata_s = 352352 ndata_e = 374373
(  16) nmax = 120 npara_all = 14641
(  16) index  check: int_data ~=     0.300G < INT_LIM (2G) : safe~~~
(  16) index  check: int_para ~=     0.200G < INT_LIM (2G) : safe~~~
(  16) memory check: mem_data ~=     1.597G < MEM_LIM (4G) : safe~~~
(  16) memory check: mem_para ~=     1.597G < MEM_LIM (4G) : safe~~~
(  16) memory check: mem_all  ~=     3.999G < MEM_LIM (4G) : safe~~~
(  17) ndata_all = 528506 ndata_avg = 22022 ndata = 22022 ndata_s = 374374 ndata_e = 396395
(  17) nmax = 120 npara_all = 14641
(  17) index  check: int_data ~=     0.300G < INT_LIM (2G) : safe~~~
(  17) index  check: int_para ~=     0.200G < INT_LIM (2G) : safe~~~
(  17) memory check: mem_data ~=     1.597G < MEM_LIM (4G) : safe~~~
(  17) memory check: mem_para ~=     1.597G < MEM_LIM (4G) : safe~~~
(  17) memory check: mem_all  ~=     3.999G < MEM_LIM (4G) : safe~~~
(  18) ndata_all = 528506 ndata_avg = 22022 ndata = 22022 ndata_s = 396396 ndata_e = 418417
(  18) nmax = 120 npara_all = 14641
(  18) index  check: int_data ~=     0.300G < INT_LIM (2G) : safe~~~
(  18) index  check: int_para ~=     0.200G < INT_LIM (2G) : safe~~~
(  18) memory check: mem_data ~=     1.597G < MEM_LIM (4G) : safe~~~
(  18) memory check: mem_para ~=     1.597G < MEM_LIM (4G) : safe~~~
(  18) memory check: mem_all  ~=     3.999G < MEM_LIM (4G) : safe~~~
(  19) ndata_all = 528506 ndata_avg = 22022 ndata = 22022 ndata_s = 418418 ndata_e = 440439
(  19) nmax = 120 npara_all = 14641
(  19) index  check: int_data ~=     0.300G < INT_LIM (2G) : safe~~~
(  19) index  check: int_para ~=     0.200G < INT_LIM (2G) : safe~~~
(  19) memory check: mem_data ~=     1.597G < MEM_LIM (4G) : safe~~~
(  19) memory check: mem_para ~=     1.597G < MEM_LIM (4G) : safe~~~
(  19) memory check: mem_all  ~=     3.999G < MEM_LIM (4G) : safe~~~
(  20) ndata_all = 528506 ndata_avg = 22022 ndata = 22022 ndata_s = 440440 ndata_e = 462461
(  20) nmax = 120 npara_all = 14641
(  20) index  check: int_data ~=     0.300G < INT_LIM (2G) : safe~~~
(  20) index  check: int_para ~=     0.200G < INT_LIM (2G) : safe~~~
(  20) memory check: mem_data ~=     1.597G < MEM_LIM (4G) : safe~~~
(  20) memory check: mem_para ~=     1.597G < MEM_LIM (4G) : safe~~~
(  20) memory check: mem_all  ~=     3.999G < MEM_LIM (4G) : safe~~~
(  21) ndata_all = 528506 ndata_avg = 22022 ndata = 22022 ndata_s = 462462 ndata_e = 484483
(  21) nmax = 120 npara_all = 14641
(  21) index  check: int_data ~=     0.300G < INT_LIM (2G) : safe~~~
(  21) index  check: int_para ~=     0.200G < INT_LIM (2G) : safe~~~
(  21) memory check: mem_data ~=     1.597G < MEM_LIM (4G) : safe~~~
(  21) memory check: mem_para ~=     1.597G < MEM_LIM (4G) : safe~~~
(  21) memory check: mem_all  ~=     3.999G < MEM_LIM (4G) : safe~~~
(  22) ndata_all = 528506 ndata_avg = 22022 ndata = 22022 ndata_s = 484484 ndata_e = 506505
(  22) nmax = 120 npara_all = 14641
(  22) index  check: int_data ~=     0.300G < INT_LIM (2G) : safe~~~
(  22) index  check: int_para ~=     0.200G < INT_LIM (2G) : safe~~~
(  22) memory check: mem_data ~=     1.597G < MEM_LIM (4G) : safe~~~
(  22) memory check: mem_para ~=     1.597G < MEM_LIM (4G) : safe~~~
(  22) memory check: mem_all  ~=     3.999G < MEM_LIM (4G) : safe~~~
(  23) nmax = 120 npara_all = 14641
(  23) index  check: int_data ~=     0.300G < INT_LIM (2G) : safe~~~
(  23) index  check: int_para ~=     0.200G < INT_LIM (2G) : safe~~~
(  23) memory check: mem_data ~=     1.597G < MEM_LIM (4G) : safe~~~
(  23) memory check: mem_para ~=     1.597G < MEM_LIM (4G) : safe~~~
(  23) memory check: mem_all  ~=     3.997G < MEM_LIM (4G) : safe~~~
(  12) nmax = 120 npara_all = 14641
(  12) index  check: int_data ~=     0.300G < INT_LIM (2G) : safe~~~
(  12) index  check: int_para ~=     0.200G < INT_LIM (2G) : safe~~~
(  12) memory check: mem_data ~=     1.597G < MEM_LIM (4G) : safe~~~
(  12) memory check: mem_para ~=     1.597G < MEM_LIM (4G) : safe~~~
(  12) memory check: mem_all  ~=     3.999G < MEM_LIM (4G) : safe~~~
(  13) nmax = 120 npara_all = 14641
(  13) index  check: int_data ~=     0.300G < INT_LIM (2G) : safe~~~
(  13) index  check: int_para ~=     0.200G < INT_LIM (2G) : safe~~~
(  13) memory check: mem_data ~=     1.597G < MEM_LIM (4G) : safe~~~
(  13) memory check: mem_para ~=     1.597G < MEM_LIM (4G) : safe~~~
(  13) memory check: mem_all  ~=     3.999G < MEM_LIM (4G) : safe~~~
(  14) nmax = 120 npara_all = 14641
(  14) index  check: int_data ~=     0.300G < INT_LIM (2G) : safe~~~
(  14) index  check: int_para ~=     0.200G < INT_LIM (2G) : safe~~~
(  14) memory check: mem_data ~=     1.597G < MEM_LIM (4G) : safe~~~
(  14) memory check: mem_para ~=     1.597G < MEM_LIM (4G) : safe~~~
(  14) memory check: mem_all  ~=     3.999G < MEM_LIM (4G) : safe~~~
(  15) nmax = 120 npara_all = 14641
(  15) index  check: int_data ~=     0.300G < INT_LIM (2G) : safe~~~
(  15) index  check: int_para ~=     0.200G < INT_LIM (2G) : safe~~~
(  15) memory check: mem_data ~=     1.597G < MEM_LIM (4G) : safe~~~
(  15) memory check: mem_para ~=     1.597G < MEM_LIM (4G) : safe~~~
(  15) memory check: mem_all  ~=     3.999G < MEM_LIM (4G) : safe~~~
(   6)     2: seconds of initialization and scan data
(   7)     2: seconds of initialization and scan data
(   8)     2: seconds of initialization and scan data
(   9)     2: seconds of initialization and scan data
(  10)     2: seconds of initialization and scan data
(  11)     2: seconds of initialization and scan data
(   1)     2: seconds of initialization and scan data
(   3)     2: seconds of initialization and scan data
(   4)     2: seconds of initialization and scan data
(   5)     2: seconds of initialization and scan data
(   0)     2: seconds of initialization and scan data
(   2)     2: seconds of initialization and scan data
(  23)     2: seconds of initialization and scan data
(  18)     2: seconds of initialization and scan data
(  19)     2: seconds of initialization and scan data
(  20)     2: seconds of initialization and scan data
(  22)     2: seconds of initialization and scan data
(  21)     2: seconds of initialization and scan data
(  16)     3: seconds of initialization and scan data
(  17)     3: seconds of initialization and scan data
(  14)     3: seconds of initialization and scan data
(  13)     3: seconds of initialization and scan data
(  15)     3: seconds of initialization and scan data
(  12)     3: seconds of initialization and scan data
(  11)    17: seconds of processing gravity and partial
(   5)    17: seconds of processing gravity and partial
(   3)    17: seconds of processing gravity and partial
(   7)    17: seconds of processing gravity and partial
(   9)    17: seconds of processing gravity and partial
(   1)    17: seconds of processing gravity and partial
(  23)    17: seconds of processing gravity and partial
(   8)    17: seconds of processing gravity and partial
(  10)    17: seconds of processing gravity and partial
(  21)    17: seconds of processing gravity and partial
(   2)    17: seconds of processing gravity and partial
(  15)    16: seconds of processing gravity and partial
(  19)    18: seconds of processing gravity and partial
(  22)    18: seconds of processing gravity and partial
(   4)    18: seconds of processing gravity and partial
(   0)    18: seconds of processing gravity and partial
(  20)    18: seconds of processing gravity and partial
(  18)    18: seconds of processing gravity and partial
(  17)    17: seconds of processing gravity and partial
(   6)    18: seconds of processing gravity and partial
(  13)    17: seconds of processing gravity and partial
(  16)    17: seconds of processing gravity and partial
(  14)    17: seconds of processing gravity and partial
(  12)    17: seconds of processing gravity and partial
(   9)   476: seconds of finish ATPA&ATPY
(  11)   476: seconds of finish ATPA&ATPY
(  10)   478: seconds of finish ATPA&ATPY
(   7)   479: seconds of finish ATPA&ATPY
(   8)   481: seconds of finish ATPA&ATPY
(  16)   481: seconds of finish ATPA&ATPY
(   6)   481: seconds of finish ATPA&ATPY
(  17)   482: seconds of finish ATPA&ATPY
(  23)   483: seconds of finish ATPA&ATPY
(  15)   483: seconds of finish ATPA&ATPY
(  20)   483: seconds of finish ATPA&ATPY
(  13)   484: seconds of finish ATPA&ATPY
(   5)   485: seconds of finish ATPA&ATPY
(  14)   485: seconds of finish ATPA&ATPY
(   1)   486: seconds of finish ATPA&ATPY
(   4)   485: seconds of finish ATPA&ATPY
(  12)   485: seconds of finish ATPA&ATPY
(   3)   489: seconds of finish ATPA&ATPY
(  18)   489: seconds of finish ATPA&ATPY
(   0)   489: seconds of finish ATPA&ATPY
(   2)   491: seconds of finish ATPA&ATPY
(  19)   491: seconds of finish ATPA&ATPY
(  21)   493: seconds of finish ATPA&ATPY
(  22)   494: seconds of finish ATPA&ATPY
(  15) in total processors of   24
(  13) in total processors of   24
(  11) in total processors of   24
(   9) in total processors of   24
(   5) in total processors of   24
(   7) in total processors of   24
(   1) in total processors of   24
(   3) in total processors of   24
(  23) in total processors of   24
(  14) in total processors of   24
(  16) in total processors of   24
(  17) in total processors of   24
(   6) in total processors of   24
(  19) in total processors of   24
(  21) in total processors of   24
(  10) in total processors of   24
(  12) in total processors of   24
(   2) in total processors of   24
(   4) in total processors of   24
(  18) in total processors of   24
(   8) in total processors of   24
(  20) in total processors of   24
(  22) in total processors of   24
(   0) in total processors of   24
(   0) nprow =    4 npcol =    6 myrow =    0 mycol =    0
(   6) nprow =    4 npcol =    6 myrow =    1 mycol =    0
(   6) mp = 3660 nq = 2442 
(  23) nprow =    4 npcol =    6 myrow =    3 mycol =    5
(  23) mp = 3660 nq = 2439 
(  12) nprow =    4 npcol =    6 myrow =    2 mycol =    0
(  12) mp = 3660 nq = 2442 
(   1) nprow =    4 npcol =    6 myrow =    0 mycol =    1
(   1) mp = 3661 nq = 2442 
(   2) nprow =    4 npcol =    6 myrow =    0 mycol =    2
(   2) mp = 3661 nq = 2440 
(   3) nprow =    4 npcol =    6 myrow =    0 mycol =    3
(   3) mp = 3661 nq = 2439 
(  16) nprow =    4 npcol =    6 myrow =    2 mycol =    4
(  16) mp = 3660 nq = 2439 
(   4) nprow =    4 npcol =    6 myrow =    0 mycol =    4
(   4) mp = 3661 nq = 2439 
(   5) nprow =    4 npcol =    6 myrow =    0 mycol =    5
(   5) mp = 3661 nq = 2439 
(  17) nprow =    4 npcol =    6 myrow =    2 mycol =    5
(  17) mp = 3660 nq = 2439 
(  18) nprow =    4 npcol =    6 myrow =    3 mycol =    0
(  18) mp = 3660 nq = 2442 
(   7) nprow =    4 npcol =    6 myrow =    1 mycol =    1
(   7) mp = 3660 nq = 2442 
(   8) nprow =    4 npcol =    6 myrow =    1 mycol =    2
(   8) mp = 3660 nq = 2440 
(   9) nprow =    4 npcol =    6 myrow =    1 mycol =    3
(   9) mp = 3660 nq = 2439 
(  10) nprow =    4 npcol =    6 myrow =    1 mycol =    4
(  10) mp = 3660 nq = 2439 
(  22) nprow =    4 npcol =    6 myrow =    3 mycol =    4
(  22) mp = 3660 nq = 2439 
(  11) nprow =    4 npcol =    6 myrow =    1 mycol =    5
(  11) mp = 3660 nq = 2439 
(  13) nprow =    4 npcol =    6 myrow =    2 mycol =    1
(  14) nprow =    4 npcol =    6 myrow =    2 mycol =    2
(  14) mp = 3660 nq = 2440 
(  15) nprow =    4 npcol =    6 myrow =    2 mycol =    3
(  15) mp = 3660 nq = 2439 
(  19) nprow =    4 npcol =    6 myrow =    3 mycol =    1
(  19) mp = 3660 nq = 2442 
(  20) nprow =    4 npcol =    6 myrow =    3 mycol =    2
(  20) mp = 3660 nq = 2440 
(  21) nprow =    4 npcol =    6 myrow =    3 mycol =    3
(  21) mp = 3660 nq = 2439 
(  13) mp = 3660 nq = 2442 
(   0) mp = 3661 nq = 2442 
(   0)   122: seconds of inverting N
OUTPUT: 2006-05.mvf.l1c.120.NMA.L2
(   0)     0: seconds of output data

Normal end of ECHO!

press any key to finish...
n0618: cp: cannot stat `*.L2': No such file or directory
Job Id: 2792768.oak-batch.osc.edu
    Job_Name = L2solver.NMA.scr
    resources_used.cput = 03:22:42
    resources_used.mem = 92987708kb
    resources_used.vmem = 107545368kb
    resources_used.walltime = 00:08:50

-----------------------
Resources requested:
nodes=2:ppn=12
-----------------------
Resources used:
cput=04:10:54
walltime=00:10:42
mem=90.808 GB
vmem=105.024 GB
-----------------------
Resource units charged (estimate):
0.428 RUs
-----------------------
Estimated RU charges under proposed new accounting policy:
0.428 RUs
See http://osc.edu/memcharging for more information.
-----------------------
